worker_processes  2;
error_log logs/error.log info;
pid        /var/run/nginx.pid;
daemon off;


events {
    worker_connections 1024;
}

http {
    server {
        listen 80;
        # server_name *.home;

        location / {
            resolver 8.8.4.4;  # use Google's open DNS server

            set $target '';
            access_by_lua '
                ngx.log(ngx.ERR, "failed to connect to redis: ", err)
                subdomain, _ = string.gsub(ngx.var.host, "([^%.]+)%..*", "%1")
                ngx.log(subdomain, "failed to connect to redis: ", err)
                # local host = ngx.req.get_headers()["Host"]
                # local match, error = ngx.re.match(host, "([a-z0-9]+)\\\\.home(:[0-9]+)?$", "i")
                # if not match then
                #     ngx.log(ngx.ERR, "match not found")
                #     return ngx.exit(400)
                # end
                # local key = match[1]

                # local redis = require "resty.redis"
                # local red = redis:new()

                # red:set_timeout(1000) -- 1 second

                # local ok, err = red:connect("127.0.0.1", 6379)
                # if not ok then
                #     ngx.log(ngx.ERR, "failed to connect to redis: ", err)
                #     return ngx.exit(500)
                # end

                # local host, err = red:get(key)
                # if not host then
                #     ngx.log(ngx.ERR, "failed to get redis key: ", err)
                #     return ngx.exit(500)
                # end

                # if host == ngx.null then
                #     ngx.log(ngx.ERR, "no host found for key ", key)
                #     return ngx.exit(400)
                # end

                # ngx.var.target = host
            ';

            proxy_pass http://$target;
        }
    }
}