env REDIS_PORT_6379_TCP_ADDR;
env REDIS_PORT_6379_TCP_PORT;

worker_processes 1;
daemon off;
pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

http {

    # include       mime.types;
    default_type  text/plain;



    error_log  /dev/stdout;
    access_log  /dev/stdout;

    sendfile        on;
    keepalive_timeout  65;

    gzip  on;

    lua_package_path "/usr/local/nginx-1.4.0/lua-lib/lua-resty-string/lib/?.lua;/usr/local/nginx-1.4.0/lua-lib/lua-resty-redis/lib/?.lua;;";

    server {
        listen       80;
        server_name  localhost;

        # access_log  logs/host.access.log;

        location /get {
            #curl 'http://192.168.99.100/set?key=foo&filed=bar&value=baz'
            #curl 'http://192.168.99.100/get?key=foo&filed=bar'
            content_by_lua '

                local redis = require "resty.redis"
                local client = redis:new()
                client:connect(os.getenv("REDIS_PORT_6379_TCP_ADDR"), tonumber(os.getenv("REDIS_PORT_6379_TCP_PORT")))

                local args = ngx.req.get_uri_args()
                local key, field = args.key, args.field

                local result, err = client:hmget(key, field)
                ngx.say(result)
            ';
        }

        location /set {

            content_by_lua '
                local redis = require "resty.redis"
                local client = redis:new()
                client:connect(os.getenv("REDIS_PORT_6379_TCP_ADDR"), tonumber(os.getenv("REDIS_PORT_6379_TCP_PORT")))

                local args = ngx.req.get_uri_args()
                local key, field, val = args.key, args.field, args.value

                client:hmset(key, field, val)
                ngx.say("Saved!")
            ';
        }
    }
}