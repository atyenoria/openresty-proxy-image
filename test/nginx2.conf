user www-data;

env DOCKER_NETWORK_ADDR;
env REDIS_PORT_6379_TCP_ADDR;
env REDIS_PORT_6379_TCP_PORT;

error_log  /var/log/nginx/error.log;
pid        /var/run/nginx.pid;

events {
    worker_connections  768;
}

http {
    include       /etc/nginx/mime.types;
    default_type application/octet-stream;
    access_log  /var/log/nginx/access.log;
    sendfile        on;
    keepalive_timeout  65;
    tcp_nodelay        on;
    gzip  on;
    gzip_disable "MSIE [1-6]\.(?!.*SV1)";
    include /etc/nginx/conf.d/*.conf;
    include /etc/nginx/sites-enabled/*;

    server {
        listen 80 default_server;
        root /usr/share/nginx/html;
        index index.html index.htm;
        location / {
            set $upstream "";
            rewrite_by_lua '
                local redis = require "nginx.redis"
                local client = redis:new()
                local docker_net_addr = os.getenv("DOCKER_NETWORK_ADDR")
                subdomain, _ = string.gsub(ngx.var.host, "([^%.]+)%..*", "%1")
                local redis_host = os.getenv("REDIS_PORT_6379_TCP_ADDR")
                local redis_port = os.getenv("REDIS_PORT_6379_TCP_PORT")
                local ok, err = client:connect(redis_host, redis_port)
                if not ok then
                    ngx.exit(ngx.HTTP_SERVICE_UNAVAILABLE)
                end

                local res, err = client:get(subdomain)
                if err then
                    ngx.exit(ngx.HTTP_SERVICE_UNAVAILABLE)
                end
                if res == ngx.full then
                    ngx.exit(ngx.HTTP_NOT_FOUND)
                else

                    ip_1, _ = string.gsub(res, "([^%.]+)%.([^%.]+)%.([^%.]+)%.([^%.]+):.*", "%1")
                    ip_2, _ = string.gsub(res, "([^%.]+)%.([^%.]+)%.([^%.]+)%.([^%.]+):.*", "%2")
                    ip_3, _ = string.gsub(res, "([^%.]+)%.([^%.]+)%.([^%.]+)%.([^%.]+):.*", "%3")
                    ip_4, _ = string.gsub(res, "([^%.]+)%.([^%.]+)%.([^%.]+)%.([^%.]+):.*", "%4")
                    local ip_addr         = ip_1.."."..ip_2.."."..ip_3.."."..ip_4
                    local ip_addr_network = ip_1.."."..ip_2..".0.0"


                    if ip_addr_network ~= docker_net_addr then
                        forward_ip, _ = string.gsub(res, "([^:]+):([0-9]+)", "%1")
                        port, _ = string.gsub(res, "([^:]+):([0-9]+)", "%2")
                        ngx.var.upstream = ip_addr
                    else
                        ngx.var.upstream = res
                    end
                end
            ';

            proxy_set_header    Host              $host;
            proxy_set_header    X-Real-IP         $remote_addr;
            proxy_set_header    X-Forwarded-Host  $host;
            proxy_set_header    X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header    X-Forwarded-Proto $scheme;
            proxy_redirect      off;
            proxy_max_temp_file_size    0;
            proxy_pass http://$upstream;
       }
    }
}